setwd("/Users/atakemma/Emma/BU_MET/Classes/AD699/Assignments/Assignment2/Done")
library(tidyverse)
library(naniar)
library(leaflet)
setwd("/Users/atakemma/Emma/BU_MET/Classes/AD699/Assignments/Assignment2/Done")
train <- read.csv("train.csv.csv")
setwd("/Users/atakemma/Emma/BU_MET/Classes/Linkedin_Post/AD699/Service_Requests_San_Antonio")
calls <- read.csv("allservicecalls.csv")
library(ggplot2)
library(tidyverse)
str(calls)
nrow(calls) # number of rows
ncol(calls) # number of columns
table(calls$Council.District) # It orders based on the district number.
sort(table(calls$Council.District), decreasing = TRUE)
district5 <- filter(calls, Council.District==5)
nrow(district5)
library(naniar)
n_miss(calls)
pct_complete_case(calls)
calls[calls==""] <- NA
n_miss(calls)
pct_complete_case(calls)
miss_var_summary(calls)
calls_open <- filter(calls, CaseStatus=="Open")
nrow(calls_open)
str(calls$OPENEDDATETIME)
str(calls$CLOSEDDATETIME)
calls$OPENEDDATETIME <- as.Date(calls$OPENEDDATETIME, format = "%m/%d/%y")
calls$CLOSEDDATETIME <- as.Date(calls$CLOSEDDATETIME, format = "%m/%d/%y")
head(calls$OPENEDDATETIME)
head(calls$CLOSEDDATETIME)
str(calls$OPENEDDATETIME)
str(calls$CLOSEDDATETIME)
calls$duration <- calls$CLOSEDDATETIME-calls$OPENEDDATETIME
head(calls$duration, n = 20)
calls_birthday <- filter(calls, month(calls$OPENEDDATETIME) == 11 & day(calls$OPENEDDATETIME) == 30) # filters on all open dates that are November 10th (month = 11, day = 30)
nrow(calls_birthday)
head(calls_birthday$OPENEDDATETIME, n=20)
sort(table(calls_birthday$Category),decreasing = TRUE)
table(calls$Council.District)
calls$Council.District <- as.character(calls$Council.District)
str(calls$Council.District)
prop.table(table(calls$SourceID)) #getting proportion
prop.table(table(calls$SourceID))*100 #getting actual percentage
prop.table(table(calls$Category))*1 #getting proportion
prop.table(table(calls$Category))*100 #getting actual percentage
unique(calls$REASONNAME) #getting list => There are 25 values.
length(unique(calls$REASONNAME)) #getting the total number
ncol(calls) # number of columns before deletion
calls <- mutate(calls, CASEID=NULL)
ncol(calls) # number of columns after deletion
library(lubridate)
calls$season <- quarter(calls$OPENEDDATETIME) #creating season column based on the open date.
#rename
calls <- mutate(calls, season = case_when(
season==1 ~ "Winter",
season==2 ~ "Spring",
season==3 ~ "Summer",
season==4 ~ "Fall"
))
head(calls$season, n=20)
ggplot(data = calls, aes(x=season, fill = season)) + geom_bar()
calls$season <- factor(calls$season, levels = c("Winter","Spring","Summer","Fall"))
ggplot(data = calls, aes(x=season, fill = season)) + geom_bar() +
labs(title = "Counts of Service Requests by Season") +
xlab("Season") + ylab("Frequency") +
scale_fill_manual(values=c("blue","green","yellow","red"))
categorycount <- sort(table(calls$Category), decreasing = TRUE)
categorycount[1:6]
calls_category <- filter(calls, Category %in% names(categorycount[1:6])) #getting only names
nrow(calls_category)
sum(categorycount[1:6])
calls_category$Category <- factor(calls_category$Category, levels = names(categorycount[1:6]))
ggplot(data = calls_category, aes(x=Category, fill = Category)) + geom_bar() +
labs(title = "Counts of Service Requests For the Top 6 Categories") +
xlab("Category") + ylab("Frequency") +
scale_fill_manual(values=c("blue","green","yellow","red", "black", "orange")) + scale_x_discrete(guide = guide_axis(n.dodge=3))
reasoncount <- sort(table(calls$REASONNAME), decreasing = TRUE)
reasoncount[1:6]
calls_reason <- filter(calls, REASONNAME %in% names(reasoncount[1:6]))
nrow(calls_reason)
sum(reasoncount[1:6])
ggplot(data = calls_reason, aes(x=SourceID, fill = SourceID)) + geom_bar() + facet_wrap(~REASONNAME) +
labs(title = "Counts of Service Requests by Source for the Top 6 Reason Names") +
xlab("Source") + ylab("Frequency") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(data = filter(calls, !is.na(duration)), aes(x = as.numeric(duration))) +
geom_histogram(color = "blue", bins = 50) + labs(title = "Histogram of Service Duration in Days") +
xlab("Duration in Days") + ylab("Frequency")
ggplot(data = filter(calls, !is.na(duration) & duration < 366 & duration >= 0), aes(x = as.numeric(duration))) +
geom_histogram(color = "blue", bins = 50) + labs(title = "Histogram of Service Duration in Days for Service Requests completed within 1 year") +
xlab("Duration in Days") + ylab("Frequency")
ggplot(data = filter(calls_reason, !is.na(duration)), aes(x = as.numeric(duration), fill = REASONNAME)) +
geom_histogram(bins = 50) + labs(title = "Histogram of Service Duration in Days split by Reason Name") +
xlab("Duration in Days") + ylab("Frequency")
ggplot(data = filter(calls_reason, !is.na(duration) & duration < 366 & duration >= 0), aes(x = as.numeric(duration), fill = REASONNAME)) +
geom_histogram(bins = 25) + labs(title = "Histogram of Service Duration in Days for Service Requests completed within 1 year split by Reason Name") +
xlab("Duration in Days") + ylab("Frequency")
typecount <- sort(table(calls$TYPENAME), decreasing = TRUE)
typecount[1:6]
calls_type <- filter(calls, TYPENAME %in% names(typecount[1:6]))
nrow(calls_type)
sum(typecount[1:6])
calls_type$Category <- factor(calls_type$Category, levels = names(categorycount[1:6]))
ggplot(data = calls_type, aes(x=Category, fill = TYPENAME)) + geom_bar() +
labs(title = "Counts of Service Requests by Category, split by Type") +
xlab("Category") + ylab("Frequency") + scale_x_discrete(guide = guide_axis(n.dodge=2))
library(leaflet)
m <- leaflet() %>% addTiles() %>% addCircles(lng= -98.49363, lat= 29.42412)
m # Print the map
m <- leaflet() %>% addTiles() %>% addCircles(lng= -98.49363, lat= 29.42412) %>% addProviderTiles(providers$OpenTopoMap)
m # Print the map
m <- leaflet() %>% addTiles() %>% addCircles(lng= -98.49363, lat= 29.42412) %>% addProviderTiles(providers$OpenRailwayMap)
m # Print the map
calls <- read.csv("allservicecalls.csv")
library(ggplot2)
library(tidyverse)
str(calls)
nrow(calls) # number of rows
ncol(calls) # number of columns
table(calls$Council.District) # It orders based on the district number.
sort(table(calls$Council.District), decreasing = TRUE)
district5 <- filter(calls, Council.District==5)
nrow(district5)
library(naniar)
n_miss(calls)
pct_complete_case(calls)
calls[calls==""] <- NA
n_miss(calls)
pct_complete_case(calls)
miss_var_summary(calls)
calls_open <- filter(calls, CaseStatus=="Open")
nrow(calls_open)
str(calls$OPENEDDATETIME)
str(calls$CLOSEDDATETIME)
calls$OPENEDDATETIME <- as.Date(calls$OPENEDDATETIME, format = "%m/%d/%y")
calls$CLOSEDDATETIME <- as.Date(calls$CLOSEDDATETIME, format = "%m/%d/%y")
head(calls$OPENEDDATETIME)
head(calls$CLOSEDDATETIME)
str(calls$OPENEDDATETIME)
str(calls$CLOSEDDATETIME)
calls$duration <- calls$CLOSEDDATETIME-calls$OPENEDDATETIME
head(calls$duration, n = 20)
calls_birthday <- filter(calls, month(calls$OPENEDDATETIME) == 11 & day(calls$OPENEDDATETIME) == 30) # filters on all open dates that are November 10th (month = 11, day = 30)
nrow(calls_birthday)
head(calls_birthday$OPENEDDATETIME, n=20)
sort(table(calls_birthday$Category),decreasing = TRUE)
table(calls$Council.District)
calls$Council.District <- as.character(calls$Council.District)
str(calls$Council.District)
prop.table(table(calls$SourceID)) #getting proportion
prop.table(table(calls$SourceID))*100 #getting actual percentage
prop.table(table(calls$Category))*1 #getting proportion
prop.table(table(calls$Category))*100 #getting actual percentage
unique(calls$REASONNAME) #getting list => There are 25 values.
length(unique(calls$REASONNAME)) #getting the total number
ncol(calls) # number of columns before deletion
calls <- mutate(calls, CASEID=NULL)
ncol(calls) # number of columns after deletion
library(lubridate)
calls$season <- quarter(calls$OPENEDDATETIME) #creating season column based on the open date.
#rename
calls <- mutate(calls, season = case_when(
season==1 ~ "Winter",
season==2 ~ "Spring",
season==3 ~ "Summer",
season==4 ~ "Fall"
))
head(calls$season, n=20)
ggplot(data = calls, aes(x=season, fill = season)) + geom_bar()
calls$season <- factor(calls$season, levels = c("Winter","Spring","Summer","Fall"))
ggplot(data = calls, aes(x=season, fill = season)) + geom_bar() +
labs(title = "Counts of Service Requests by Season") +
xlab("Season") + ylab("Frequency") +
scale_fill_manual(values=c("blue","green","yellow","red"))
categorycount <- sort(table(calls$Category), decreasing = TRUE)
categorycount[1:6]
calls_category <- filter(calls, Category %in% names(categorycount[1:6])) #getting only names
nrow(calls_category)
sum(categorycount[1:6])
calls_category$Category <- factor(calls_category$Category, levels = names(categorycount[1:6]))
ggplot(data = calls_category, aes(x=Category, fill = Category)) + geom_bar() +
labs(title = "Counts of Service Requests For the Top 6 Categories") +
xlab("Category") + ylab("Frequency") +
scale_fill_manual(values=c("blue","green","yellow","red", "black", "orange")) + scale_x_discrete(guide = guide_axis(n.dodge=3))
reasoncount <- sort(table(calls$REASONNAME), decreasing = TRUE)
reasoncount[1:6]
calls_reason <- filter(calls, REASONNAME %in% names(reasoncount[1:6]))
nrow(calls_reason)
sum(reasoncount[1:6])
ggplot(data = calls_reason, aes(x=SourceID, fill = SourceID)) + geom_bar() + facet_wrap(~REASONNAME) +
labs(title = "Counts of Service Requests by Source for the Top 6 Reason Names") +
xlab("Source") + ylab("Frequency") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(data = filter(calls, !is.na(duration)), aes(x = as.numeric(duration))) +
geom_histogram(color = "blue", bins = 50) + labs(title = "Histogram of Service Duration in Days") +
xlab("Duration in Days") + ylab("Frequency")
ggplot(data = filter(calls, !is.na(duration) & duration < 366 & duration >= 0), aes(x = as.numeric(duration))) +
geom_histogram(color = "blue", bins = 50) + labs(title = "Histogram of Service Duration in Days for Service Requests completed within 1 year") +
xlab("Duration in Days") + ylab("Frequency")
ggplot(data = filter(calls_reason, !is.na(duration)), aes(x = as.numeric(duration), fill = REASONNAME)) +
geom_histogram(bins = 50) + labs(title = "Histogram of Service Duration in Days split by Reason Name") +
xlab("Duration in Days") + ylab("Frequency")
ggplot(data = filter(calls_reason, !is.na(duration) & duration < 366 & duration >= 0), aes(x = as.numeric(duration), fill = REASONNAME)) +
geom_histogram(bins = 25) + labs(title = "Histogram of Service Duration in Days for Service Requests completed within 1 year split by Reason Name") +
xlab("Duration in Days") + ylab("Frequency")
typecount <- sort(table(calls$TYPENAME), decreasing = TRUE)
typecount[1:6]
calls_type <- filter(calls, TYPENAME %in% names(typecount[1:6]))
nrow(calls_type)
sum(typecount[1:6])
calls_type$Category <- factor(calls_type$Category, levels = names(categorycount[1:6]))
ggplot(data = calls_type, aes(x=Category, fill = TYPENAME)) + geom_bar() +
labs(title = "Counts of Service Requests by Category, split by Type") +
xlab("Category") + ylab("Frequency") + scale_x_discrete(guide = guide_axis(n.dodge=2))
library(leaflet)
m <- leaflet() %>% addTiles() %>% addCircles(lng= -98.49363, lat= 29.42412)
m # Print the map
m <- leaflet() %>% addTiles() %>% addCircles(lng= -98.49363, lat= 29.42412) %>% addProviderTiles(providers$OpenTopoMap)
m # Print the map
m <- leaflet() %>% addTiles() %>% addCircles(lng= -98.49363, lat= 29.42412) %>% addProviderTiles(providers$OpenRailwayMap)
m # Print the map
